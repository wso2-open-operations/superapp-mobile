EXPO_PUBLIC_CLIENT_ID=<asgardeo-project-client-id> # Asgardeo Client ID
EXPO_PUBLIC_REDIRECT_URI=<redirect-uri>            # Redirect URI for authentication flow
EXPO_PUBLIC_TOKEN_URL=https://api.asgardeo.io/t/<asgardeo-organization>/oauth2/token
EXPO_PUBLIC_LOGOUT_URL=https://api.asgardeo.io/t/<asgardeo-organization>/oidc/logout
EXPO_PUBLIC_BACKEND_BASE_URL=<backend-url>         # Backend API Base URL

EXPO_PUBLIC_LIBRARY_ARTICLE_FALLBACK_IMAGE=
EXPO_PUBLIC_DEVELOPER_APP_DEFAULT_URL=

#Please note that the authenticator appâ€“related URL is required only for the WSO2 Super App. 
#Since your app does not need it, you can safely remove those entries.
# Authenticator app related URLs
EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID=<google-ios-client-id>
EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID=<google-android-client-id>
EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID=<google-web-client-id>
EXPO_PUBLIC_GOOGLE_ACCESS_TOKEN_KEY=<google-access-token-key>
EXPO_PUBLIC_GOOGLE_REFRESH_TOKEN_KEY=<google-refresh-token-key>
EXPO_PUBLIC_GOOGLE_USER_INFO_KEY=<google-user-info-key>
EXPO_PUBLIC_GOOGLE_USER_INFO_URL=<google-user-info-url>
EXPO_PUBLIC_GOOGLE_TOKEN_URL=<google-token-url>
EXPO_PUBLIC_GOOGLE_DRIVE_UPLOAD_URL=<google-drive-upload-url>
EXPO_PUBLIC_GOOGLE_DRIVE_LIST_FILES_URL=<google-drive-list-url>
EXPO_PUBLIC_GOOGLE_TOKEN_INFO_URL=<google-token-info-url>
EXPO_PUBLIC_GOOGLE_DRIVE_FILE_DOWNLOAD_URL=<google-drive-file-download-url>
EXPO_PUBLIC_MICRO_APP_STORAGE_DIR=<directory-name-to-store-microapps>

# Local notifications related Configurations
# Local notifications storage key
# This key is used for persisting scheduled time-based notifications 
# (e.g., reminders before sessions, events, or other activities).
EXPO_PUBLIC_LOCAL_NOTIFICATIONS_KEY=<storage-key>

# Feed tab URLs
EXPO_PUBLIC_EVENTS_URL=<events-url>
EXPO_PUBLIC_NEWS_URL=<news-url>
EXPO_PUBLIC_LIBRARY_URL=<base-url-for-library-related-operations> 
EXPO_PUBLIC_ARTICLE_BASE_URL=<base-url-for-article-related-operations> 

# Android Notification Group definitions
# The following variables are mandatory if the app requires capabilities to display local (scheduled/unscheduled) or push notifications
EXPO_PUBLIC_NOTIFICATION_CHANNEL_ID=<notification-channel-id>
EXPO_PUBLIC_NOTIFICATION_CHANNEL_NAME=<notification-channel-name>

# App Configurations
APP_NAME=<app-name>
APP_SLUG=<app-slug>
APP_SCHEME=<app-scheme>
APP_VERSION=1.0.0
APP_OWNER=<app-owner>
BUNDLE_IDENTIFIER=com.example.superapp  # For the iOS project
ANDROID_PACKAGE=com.example.superapp    # For the Android project
EAS_PROJECT_ID=<eas-project-id>            # (Optional) EAS Project ID 

# Google Sign-In (usually your REVERSED_CLIENT_ID from the iOS plist)
IOS_URL_SCHEME=com.googleusercontent.apps.xxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Sets up the firebase plugins/modules in the `app.config.ts`. Updating this value will require a prebuild
EXPO_PUBLIC_ENABLE_FIREBASE=<true/false>
# ========== (Optional) Firebase config as a Base64 ==========
# This is a way to include the entire GoogleService-Info.plist or google-services.json
# in an environment variable, which can be useful for CI/CD environments.

# macOS: base64 -i path/to/your/GoogleService-Info.plist | tr -d '\n' | pbcopy
# Linux: base64 -w0 path/to/your/GoogleService-Info.plist | xclip -selection clipboard
# Windows: [Convert]::ToBase64String((Get-Content -Path "path\to\your\GoogleService-Info.plist" -Encoding Byte)) | Set-Clipboard
FIREBASE_IOS_PLIST_B64=<base-64-string>

# macOS: base64 -i path/to/your/google-services.json | tr -d '\n' | pbcopy
# Linux: base64 -w0 path/to/your/google-services.json | xclip -selection clipboard
# Windows: [Convert]::ToBase64String((Get-Content -Path "path\to\your\google-services.json" -Encoding Byte)) | Set-Clipboard
FIREBASE_ANDROID_JSON_B64=<base-64-string>
